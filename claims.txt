--------------------------------------------------------------

TITLE : Claims

AUTHOR      :   AKARSH SRIVASTAVA
ROLL NUMBER :   2201CS10
DECLARATION OF AUTHORSHIP :

This file (claims.txt) is a part of miniproject CS210 at Department of Computer Science and Engineering at IIT Patna.

--------------------------------------------------------------

Information about Files:

*All the files that I submitted have my name and roll number at the start , along with declaration of authorship.

Evidence for proving the working of Assembler includes 4 test examples which are -:

1. myTest1 (with 3 output files)
2. myTest2 (with 3 output files)
3. BubbleSort (with 3 output files)
4. test1.asm (with 3 output files)
5. test2.asm (with 3 output files)

*Both of my C++ programs did not show any errors or warnings when I compiled them with
g++ -pedantic and g++ -pedantic -W -Wall -Wpointer-arith -Wwrite-strings standard

*Two programs are compilable with g++ asm.cpp -o asm and g++ emu.cpp -o emu.


=====================================
PROGRAM EXECUTION FORMAT
=====================================

1. ASSEMBLER :

    EXECUTION FORMAT : g++ asm.cpp -o asm
                       ./asm.out
    Program will ask for flilename (in .asm file format) which on entering will produce 3 files as output.

    * This assembler includes two data structure to store labels and a mnemonic table .
    * It is capable of detecting errors if any.
    * It uses a single routine for both passes.

2. EMULATOR :
    
    EXECUTION FORMAT : g++ emu.cpp -o emu
                       ./emu.out

    Upon execution program will ask for filename (in .o format) followed by options such as -:

    trace
    after
    before
    isa

    Upon entering one of the above option respective instruction will be executed.
 
    * Emulator includes 3 data structures to store memory, mnemonic table with expected operands and a linked list structure word.
    * By giving instructions like before and after , the program can produce a memory dump before and after execution.
    * By giving the instruction trace , the program prints the result of the program executed.
    * It loads object file.


    =============================
    TESTING :
    =============================

1. ASSEMBLER :

    Assembler has been tested against 3 test cases.

    1)
    #Input: myTest1.asm
    #Output: 
    a. myTest1.l 
    b. myTest1.log (without any error messages)
    c. myTest1.o

    2)
    #Input: myTest2.asm
    #Output: 
    a. myTest2.l 
    b. myTest2.log (without any error messages)
    c. myTest2.o

    3) 
    #Input:asm BubbleSort.asm
    #Output: 
    a. BubbleSort.l 
    b. BubbleSort.log (without any error messages)
    c. BubbleSort.o

    4) 
    #Input:asm test1.asm
    #Output: 
    a. test1.l 
    b. test1.log (without any error messages)
    c. test1.o

    5) 
    #Input:asm test2.asm
    #Output: 
    a. test2.l 
    b. test2.log (with 9 error messages)
    c. test2.o


3. EMULATOR :
    
   Emulator has been tested against 3 test cases.

   myTest1.asm
   myTest2.asm
   BubbleSort.asm 

   Upon giving respective option emulator produces desired results.

   1) 

    #Input:asm myTest1.o
    #Output: 
    
    myTest1.o_memdump.txt

    0x00000000	0x00000004	0x00000200	0x00000007	0x00000410
    0x00000004	0x00000400	0x00000000	0x00000005	0x00000012
    0x00000008	0x00000200	0x00000000	0x00000005	0x00000012

    2)

    #Input:asm myTest2.o
    #Output: 
    
    myTest2.o_memdump.txt

    0x00000000	0x0000000a	0x00000600	0x00000006	0x00000000
    0x00000004	0x00000005	0x00000012

    3)

    #Input:asm BubbleSort.o
    #Output: 
    
    BubbleSort.o_memdump.txt

    0x00000000	0x00100000	0x0000000b	0xffffff0a	0x00000b00
    0x00000004	0x00000003	0x00004c00	0x0000010d	0x00000012
    0x00000008	0xffffff0a	0x00000003	0x00000203	0xfffffd0a
    0x0000000c	0x00000000	0x00000003	0x00000100	0x00000103
    0x00000010	0x00000000	0x00000203	0x00000402	0x00000202
    0x00000014	0x00000007	0x00000100	0x00000007	0x0000310f
    0x00000018	0x00000100	0x00000103	0x00000402	0x00000202
    0x0000001c	0x00000007	0x00000102	0x00000007	0x0000210f
    0x00000020	0x00000502	0x00000102	0x00000100	0x00000007
    0x00000024	0x00000502	0x00000006	0x00000603	0x00000102
    0x00000028	0x00000502	0x00000006	0x00000703	0x00000702
    0x0000002c	0x00000004	0x00000602	0x00000004	0x00000007
    0x00000030	0x00000110	0x00000a11	0x00000602	0x00000004
    0x00000034	0x00000003	0x00000702	0x00000004	0x00000602
    0x00000038	0x00000005	0x00000002	0x00000702	0x00000005
    0x0000003c	0x00000100	0x00000102	0x00000006	0x00000103
    0x00000040	0xffffd911	0x00000100	0x00000202	0x00000006
    0x00000044	0x00000203	0x00000100	0x00000502	0x00000006
    0x00000048	0xffffc911	0x00000302	0x0000050a	0x0000000e
    0x0000004c	0x00000000	0x00000000	0x00000001	0x00000002
    0x00000050	0x00000003	0x00000004	0x00000005	0x00000006
    0x00000054	0x00000007	0x00000008	0x00000009



